input {
{{- if .CRD.Input.Beats.Port }}
  beats {
    id => {{ .CRD.Input.Beats.ID }}
    port => {{ .CRD.Input.Beats.Port }}
  }
{{ else if .CRD.Input.Kafka.Hosts }}
  kafka {
    id => {{ .CRD.Input.Kafka.ID }}
    {{- if eq .CRD.Input.Kafka.Topic "" }}
    topics => ["{{ .Input.Kafka.Topic }}"]
    {{- else }}
    topics => ["{{ .CRD.Input.Kafka.Topic }}"]
    {{- end }}
    bootstrap_servers => "{{ range $index, $host := .CRD.Input.Kafka.Hosts }}{{if $index}},{{end}}{{ $host }}{{end}}"
    group_id => "{{ .Input.Kafka.GroupID }}"
    decorate_events => {{ .CRD.Input.Kafka.DecorateEvents }}
    auto_offset_reset => "{{ .CRD.Input.Kafka.AutoOffsetReset }}"
    security_protocol => "{{ .CRD.Input.Kafka.SecurityProtocol }}"
    sasl_mechanism => "{{ .CRD.Input.Kafka.SaslMechanism }}"
    sasl_jaas_config => "org.apache.kafka.common.security.scram.ScramLoginModule required username='${KAFKA_USERNAME}' password='${KAFKA_PASSWORD}';"
    consumer_threads => "{{ .CRD.Input.Kafka.ConsumerThreads }}"
  }
{{ else if .CRD.Input.TCP.Port }}
  tcp {
      id => {{ .CRD.Input.TCP.ID }}
      port => {{ .CRD.Input.TCP.Port }}
    }
{{ else if .CRD.Input.UDP.Port }}
  udp {
    id => {{ .CRD.Input.UDP.ID }}
    port => {{ .CRD.Input.UDP.Port }}
    queue_size => {{ .CRD.Input.UDP.QueueSize }}
    workers => {{ .CRD.Input.UDP.Workers }}
  }
{{ else if .CRD.Input.HTTP.Port }}
  http {
    id => {{ .CRD.Input.HTTP.ID }}
    port => {{ .CRD.Input.HTTP.Port }}
    {{- if ne .CRD.Input.HTTP.Secret "" }}
    user => "${HTTP_USERNAME}"
    password => "${HTTP_PASSWORD}"
    {{- end }}
  }
{{ else if ne .CRD.Input.S3.Region "" }}
    s3 {
        id => {{ .CRD.Input.S3.ID }}
        access_key_id => "${ACCESS_KEY_ID}"
        secret_access_key => "${SECRET_ACCESS_KEY}"
        bucket => "{{ .Input.S3.Bucket }}"
        {{- if ne .CRD.Input.S3.Endpoint "" }}
        endpoint => "{{ .CRD.Input.S3.Endpoint }}"
        {{- end }}
        region => "{{ .CRD.Input.S3.Region }}"
        gzip_pattern => "{{ .CRD.Input.S3.GzipPattern }}"
        delete => {{ .CRD.Input.S3.Delete }}
        exclude_pattern => "{{ .CRD.Input.S3.ExcludePattern }}"
        prefix => "{{ .CRD.Input.S3.Prefix }}"
     }
{{ else if .CRD.Input.DLQ }}
  dead_letter_queue {
      id => {{ .CRD.Input.DLQ.ID }}
      path => "{{ .CRD.Input.DLQ.Path }}"
      commit_offsets => {{ .CRD.Input.DLQ.CommitOffsets }}
      pipeline_id => "{{ .CRD.Input.DLQ.PipelineID }}"
      tags => [{{ range $index, $tag := .CRD.Input.DLQ.Tags }}{{if $index}},{{end}}"{{ $tag }}"{{end}}]
  }
{{- end }}
}

filter {
{{- if ne .CRD.Filter "" }}
  {{ .CRD.Filter }}
{{- end }}
}

output {
{{- if .CRD.Output.Elasticsearch.Hosts }}
  elasticsearch {
      hosts => [{{ range $index, $host := .CRD.Output.Elasticsearch.Hosts }}{{if $index}},{{end}}"{{ $host }}"{{end}}]
      {{- if ne .CRD.Output.Elasticsearch.Secret "" }}
      user => "${ELASTIC_USERNAME}"
      password => "${ELASTIC_PASSWORD}"
      {{- end }}
      ssl => {{ .CRD.Output.Elasticsearch.SSL }}
      ssl_certificate_verification => {{ .CRD.Output.Elasticsearch.SSLCertificateVerification }}
      {{- if ne .CRD.Output.Elasticsearch.Cacert "" }}
      cacert => "{{ .CRD.Output.Elasticsearch.Cacert }}"
      {{- end }}
    {{- if .CRD.Output.Elasticsearch.ILM }}
      ilm_enabled => {{ .CRD.Output.Elasticsearch.ILM }}
      {{- if eq .CRD.Output.Elasticsearch.Index "" }}
      ilm_rollover_alias => "{{ .Output.Elasticsearch.RolloverAlias }}"
      {{- else }}
      ilm_rollover_alias => "{{ .CRD.Output.Elasticsearch.Index }}"
      {{- end }}
      ilm_pattern => "{now/d}-000001"
      ilm_policy => "{{ .Output.Elasticsearch.Policy }}"
    {{- else }}
      {{- if eq .CRD.Output.Elasticsearch.Index "" }}
      index => "{{ .Output.Elasticsearch.RolloverAlias }}-%{+YYYY.MM.dd}"
      {{- else }}
      index => "{{ .CRD.Output.Elasticsearch.Index }}-%{+YYYY.MM.dd}"
      {{- end }}
    {{- end }}
  }
{{ else if .CRD.Output.Graphite.Port }}
  graphite {
    host => {{ .CRD.Output.Graphite.Host }}
    port => {{ .CRD.Output.Graphite.Port }}
    reconnect_interval => {{ .CRD.Output.Graphite.ReconnectInterval }}
    resend_on_failure => {{ .CRD.Output.Graphite.ResendOnFailure }}
    timestamp_field => {{ .CRD.Output.Graphite.TimestampField }}
  }
  {{ else if .CRD.Output.TCP.Port }}
  tcp {
    host => {{ .CRD.Output.TCP.Host }}
    port => {{ .CRD.Output.TCP.Port }}
  }
  {{ else if .CRD.Output.UDP.Port }}
  udp {
    host => {{ .CRD.Output.UDP.Host }}
    port => {{ .CRD.Output.UDP.Port }}
  }
  {{ else if ne .CRD.Output.S3.Region "" }}
    s3 {
      bucket => "{{ .Output.S3.Bucket }}"
      access_key_id => ${S3_ACCESS_KEY_ID}
      secret_access_key => ${S3_SECRET_ACCESS_KEY}
      region => {{ .CRD.Output.S3.Region }}
      canned_acl => {{ .CRD.Output.S3.CannedACL }}
      encoding => {{ .CRD.Output.S3.Encoding }}
      {{- if ne .CRD.Output.S3.Endpoint "" }}
      endpoint => {{ .CRD.Output.S3.Endpoint }}
      {{- end }}
      rotation_strategy => {{ .CRD.Output.S3.RotationStrategy }}
      size_file => {{ .CRD.Output.S3.SizeFile }}
      time_file => {{ .CRD.Output.S3.TimeFile }}
      upload_worker_count => {{ .CRD.Output.S3.UploadWorkerCount }}
    }
  {{- end }}
}